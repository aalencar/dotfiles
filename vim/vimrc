" Author: Alexandre Alencar
" alencardev@gmail.com
" I highly recommend you to copy whatever you want from this vimrc file,
" though it was customized for my needs, so keep that in mind.

" PLUGIN MANAGEMENT {{{1

" --------------- Vundle Inicialization --------------- {{{2
" enter the current millenium
set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim' " }}}2

" --------------- List of Plugins --------------- {{{2
" Navigation
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-vinegar.git'
Plugin 'christoomey/vim-tmux-navigator'
"Plugin 'scrooloose/nerdtree'
"Plugin 'bling/vim-bufferline'
"Plugin 'easymotion/vim-easymotion'

" Programming
Plugin 'tpope/vim-fugitive' " git integration
"Plugin 'tpope/vim-rhubarb'  " enables :Gbrowse and other things
"Plugin 'gregsexton/gitv'    " display commits
Plugin 'pangloss/vim-javascript'
"Plugin 'leafgarland/typescript-vim'
Plugin 'SirVer/ultisnips'
Plugin 'jiangmiao/auto-pairs'
"Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-surround'
"Plugin 'tpope/vim-repeat'
"Plugin 'majutsushi/tagbar'
"Plugin 'w0rp/ale'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdcommenter'
" Correct indentation of css/js inside html
Plugin 'othree/html5.vim'
Plugin 'mxw/vim-jsx'
"Plugin 'ternjs/tern_for_vim'
"Plugin 'airblade/vim-gitgutter'

" Style
Plugin 'altercation/vim-colors-solarized'
"Plugin 'morhetz/gruvbox'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Misc
"
" tracks time spent on vim
"Plugin 'takac/vim-spotifysearch'
Plugin 'wakatime/vim-wakatime'

" }}}2

"  --------------- Plugins Config --------------- {{{2
" Ultisnips
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'

" Ctrl-P
"let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = 'node_modules\|git'
let g:ctrlp_show_hidden = 1

" vinegar
let g:netrw_liststyle = 0
let g:netrw_list_hide = '^.*\.map$,^.*\.spec\..*$'

" airline
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_powerline_fonts = 1

" tagbar
let g:tagbar_ctags_bin = '/usr/local/Cellar/ctags/5.8_1/bin/ctags'

" autopairs
let g:AutoPairsFlyMode = 1

" vim-jsx
let g:jsx_ext_required = 0

" ale
let g:ale_linters = {'javascript': ['eslint']}
"let g:ale_keep_list_window_open = 1

" All of your Plugins must be added before the following line
call vundle#end()            " required }}}2
" }}}1

"  GENERAL CONFIGURATION {{{1

" --------------- Misc --------------- {{{2
set ttyfast " faster redraw

" just copy and paste from system clipboard using y and p
"set clipboard=unnamed

" make vim try to detect file types and load plugins for them
filetype on
filetype plugin indent on
filetype indent on

" turn on syntax highlighting
syntax enable
syntax on

set hidden                      " make vim use hidden buffer more liberally
set noswapfile                  " no swap files
set autoread                    " reload files changed outside vim
set encoding=utf-8              " encoding is utf 8
set nobackup
runtime macros/matchit.vim      " enable matchit plugins which ships with vim and enhances '%'
set dict+=/usr/share/dict/words " dictionary
au FileType * set fdm=syntax
au FileType html set fdm=indent
au BufNewFile,BufRead *.ejs set ft=html " }}}2

" --------------- UI --------------- {{{2
set scrolloff=3                 " minimal number of lines to keep above and bellow the cursor
set number                      " display line number
set relativenumber              " display the line number relative to the line with the cursor
set showcmd                     " show last command entered in the bottom bar"
set wildmenu                    " visual autocomplete for command menu
set lazyredraw                  " redraw only when need to
set laststatus=2                " always shows the file name at the bottom }}}2

"  --------------- Editing --------------- {{{2
set backspace=indent,eol,start

" toggle invisible characters
set list
set listchars=tab:→\ ,trail:⋅,extends:❯,precedes:❮
set showbreak=↪


"set textwidth=80
" }}}2

" --------------- Searching --------------- {{{2
set incsearch       " search as characters are entered
set hlsearch        " highlight matches
set ignorecase      " the case of normal letters is ignored.
set smartcase       " case-sensitive searching only when a capital letter appears" }}}2

" --------------- Folding --------------- {{{2
"set foldcolumn=4                " display folding level on left bar
set foldlevelstart=1            " open most folds by default 
set foldnestmax=3 " }}}2

"  --------------- Indentation --------------- {{{2
set autoindent      " autoindent based on line above, works most of the time
set smartindent     " smarter indent for C-like languages


set expandtab       " always use spaces
set tabstop=2       " how many spaces a <Tab> counts for
set shiftwidth=2    " how many spaces when identing
set softtabstop=2   " number of tabs when in insert mode

" tab setup for html files
au Filetype html setlocal shiftwidth=2 tabstop=2 softtabstop=2
au Filetype typescript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
au Filetype css setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
"au Filetype javascript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
" }}}2

"  --------------- Style --------------- {{{2
" For solarized plugin (color scheme)
" https://github.com/altercation/vim-colors-solarized
syntax enable
set background=dark
colorscheme solarized
" }}}2
" }}}1

"  MAPPINGS {{{1
let mapleader = ","

" --------------- Good Habits--------------- {{{2
vnoremap <c-[> <c-o>:throw 'Use C-J C-K instead of c-c'<cr>
inoremap <ESC> <C-o>:throw 'Use jk instead of ESC'<CR>
"nnoremap zo :throw 'Use "space" to open/close folds'<CR>
"nnoremap zc :throw 'Use "space" to open/close folds'<CR>
nnoremap $ :throw 'Use "E" instead of $'<CR>
nnoremap ^ :throw 'Use "B" instead of ^'<CR>
inoremap jk <ESC>
vnoremap <C-J><C-K> <ESC>
"cnoremap <C-J><C-K> <ESC>
" }}}2

"  --------------- Plugins --------------- {{{2
" ternjs
noremap <leader>td :TernDef<CR>

"  UltiSnips
noremap <leader>u :UltiSnipsEdit<CR>

" vim-fugitive
noremap <leader>gc :Gcommit<CR>
noremap <leader>gd :Gdiff<CR>
noremap <leader>gs :Gstatus<CR>
noremap <leader>gp :Gpush<CR>
noremap <leader>gl :Glog<CR>
noremap <leader>gg :Ggrep 
noremap <leader>gm :Gmove 

" vinegar
noremap § :Explore<CR>

" Gundo
nnoremap <leader>U :GundoToggle<CR>

" Gitv
nnoremap <leader>gv :Gitv<CR>

" Spotify search
nnoremap <leader>sp :Spotify 

" vundle
nnoremap <leader>pi :source $MYVIMRC <bar> PluginInstall<CR>

" easymotion
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader>l <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" }}}2

"  --------------- Editing  --------------- {{{2
" Visual select the whole file
noremap <leader>a ggVG
" Correctly indent the whole file
noremap <leader>= maggVG='a
" TODO: Find a better way to paste, this method isn't working
vnoremap <leader>y "*y
vmap <leader>cy di<C-R>*
vmap <leader>p "*
" Paste register " when in insert mode
inoremap <C-F> <C-R>"
" Paste register * (clipboard) when in insert mode
inoremap <C-G> <C-R>*
" Goes to the last place something was select in visual mode
nnoremap gV `[v`]
" Goes to the last place something was inserted
nnoremap gi `[i<ESC>
" }}}2

" --------------- Searching --------------- {{{2
nnoremap <leader><space> :nohlsearch<CR>
" }}}2

" --------------- Folding --------------- {{{2
nnoremap <space> za         " open/close folds }}}2

"  --------------- Navigation  --------------- {{{2
" moving up and down as expected
nnoremap j gj
nnoremap k gk

" move to beginning and end of line
nnoremap B ^
nnoremap E $

" scroll the viewport 3x faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" quickfix list
noremap ]q :cn<CR>
noremap [q :cp<CR>

" location list
noremap ]l :lnext<CR>
noremap [l :lprevious<CR>

" toggle relative number
noremap <leader>rl :set relativenumber!<CR>
" }}}2

"  --------------- Tabs  --------------- {{{2
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
"noremap <leader><space> :tablast<CR>
" }}}2

" --------------- Files  --------------- {{{2
noremap <leader>w :w<CR> 
noremap <leader>q :q<CR>
noremap <leader>Q :q!<CR>

" vim
noremap <leader>ev :e $MYVIMRC<CR>
noremap <leader>sv :source $MYVIMRC<CR>

" tmux
noremap <leader>et :e $TMUXCONF<CR>
noremap <leader>es :e ~/.tmux-sessions/<CR>

" bash
noremap <leader>eb :e ~/.bashrc<CR>

" zsh
noremap <leader>ez :e ~/.zshrc<CR>

" journal
noremap <leader>j :e ~/journal<CR>

" todo
noremap <leader>k :e ~/TODO<CR>
" }}}2

"  --------------- Buffers --------------- {{{2
" switch to next and previous buffer
nnoremap ]b :bn<CR>
nnoremap [b :bp<CR>
" switch to first and last buffer
"noremap <C-S-N> :bf<CR>
"noremap <C-S-M> :bl<CR>
noremap <leader>d :Kwbd<CR>
noremap <leader>D :bdelete<CR>
noremap <C-@> <C-^>
" }}}2

"  --------------- Windows --------------- {{{2
" swith between window
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" maps to split window
"noremap <leader>\ :vsplit<CR>
"noremap <leader>- :split<CR>
" }}}2

"  --------------- Development --------------- {{{2
"  WebDev
nnoremap <leader>oc :!open -a /Applications/Google\ Chrome.app %<CR><CR>
nnoremap <leader>os :!open -a /Applications/Safari.app %<CR><CR>

" Angular 2
nnoremap <leader>tt :tabnew % <bar> :vsplit %.component.css <bar> :sfind *.html<CR> " }}}2

"  --------------- Style --------------- {{{2
nnoremap <leader>bd :set background=dark<CR>
nnoremap <leader>bl :set background=light<CR>
" }}}2
"
"  --------------- Indentation --------------- {{{2
nnoremap <leader>2 :set sw=2 ts=2 sts=2<CR>
nnoremap <leader>4 :set sw=4 ts=4 sts=4<CR>
" }}}2
" }}}1

"  FUNCTIONS {{{1
" popolates the args list with the quickfix files
command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(values(buffer_numbers))
endfunction
" }}}1
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif
" vim:foldmethod=marker:foldlevel=0
